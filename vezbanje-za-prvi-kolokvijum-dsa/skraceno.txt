####################jednostruke lančane:

#Osobine
frst, last, temp na nul,
prazna ako nema frst
#kreiranje
pri kreiranju uvek pravi temp, ako je prazan stavlja frst i last tu.
inače spaja i premešta last.
#insert after:
pravi temp, temp->next = pom -> next,  pom-> next =  temp.
ako je poslednji last = temp.
#insert before
pravi temp, i ubacuje podatke iz pom-a, 
elem upisuje u pom data,
pom next biva temp.
ako je zadji last = temp.
#delete_after
ako je zadji - ništa
ako je prazna - ništa
ako je predzasnji last = pom //bez riturna
temp  kopira sledeći element (jer se briše nakon njega)
pom-> next biva temp -> next,
osobađa se temp
#delete_actual:
ako je  prazna - ništa,
ako je jedini  - sve stavi na null, return
temp = pom -> next,
pom -> next  = temp -> next;
pom -> data = temp -> data
free(temp);
#delete_before 
pretraga dok ne dođemo do elementa, zatim  delete actual, čuvamo p i q.
#delete_on_position 
samo brojimo koliko puta je bilo next.
#delete_by_value
proveri se vrednsot, ako se poklapa pošalje se u delete_actual
#display
ako je prazan ništa
krene od prvog, ide do null, printa

#######dvostruko-ulancane-liste
#Osobine:
first, temp // nema last, prev i next
#kreiranje
funkcija create_new_node pravi novu granu.
#insert_at_head
pravi novu
ako je first  null, stavlja u first.
inače, first -> prev = temp, 
temp -> next = first 
first = temp //Povezuje ih
#insert_at_tail
pošto nemamo last, dobićemo ga  kruženjem, frst stavlja u temp
pravi novi noud
ako nema first, ubaci ga tu
inače kruži dok temp -> next !=  NULL
onda poveže temp -> next i new_node -> prev.
#display
isti.
#display_reverse 
isto, prethodno kruži do zadnjeg ( temmp -> next != NULL)
#delete_actual
ako je prvi :
    prvi prebacuje na first -> next
    briše prev od first
    briše first, return
čuva prev // da bi mogao da raskine prev vezu 
ako je zadnji:
    prev -> next = NULL
    pom -> prev = NULL
    free(pom), return
čuva next
briše pom -> prev
briše pom -> next
briše pom.
spava next i prev.
#delete_after i #delete_before 
samo pošalješ prev ili next  u delete_actual.

#############kružne
#osobine :
imaju data i next, 
rear -> next pokazuje na first
#crete:
ubacuje  novi noud,
ako je first == NULL - tu 
inače spaja rear  sa njim, prebacuje rear na njega 
//NEMA return
#####stack preko niza:
niz, sajt
empti ako je top -1
pun ako je top = size - 1
push - ako nije pun - top se ubvećava i upisuje
pop - retuna vrh ako nije prazan i smanji top.
display od 0 do top ako nije prazan
####stek preko lančane
is_empty - ako je top NULL
push - pravi temp, ubacuje, 
temp -> next = top
top prebacuje na temp.
#pop.
    vraća int,
    ako je prazan retun
    uzima sa topa
    temp  nulira i briše
    retun  elem.
display 
ide od top do null  i ispisuje

#### red. f, r, sq  - size
prazan  ako je f = -1,


pun  ako je f ==0  i r = size - 1 ili f =  r +1  % size.
insert uzima elem,
    ako je pun ništa
    ako je prazan f = 0 - ne retuna
    r se poveća po modulu.
    upiši u r.
delete
    ako je prazan ništa
    ako je  f == r
    vrat na -1
    f uveća po modulu
    vrati elem.
display ide od f do r, uveća se po modulu
i je lokalno - ne u foru
print  nakon fora

